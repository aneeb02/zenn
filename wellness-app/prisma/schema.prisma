// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile        Profile?
  affirmations   Affirmation[]
  sessions       FocusSession[]
  stats          DailyStats[]
  journalEntries JournalEntry[]
}

model Profile {
  id                 String   @id @default(cuid())
  userId             String   @unique
  goals              String[]
  healthConditions   String[]
  tone               String
  notificationTimes  String[]
  focusSessionLength Int      @default(25)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Affirmation {
  id        String   @id @default(cuid())
  userId    String
  text      String
  category  String   @default("general")
  isCustom  Boolean  @default(false)
  source    String   @default("AI")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isCustom])
  @@index([createdAt])
}

model FocusSession {
  id           String   @id @default(cuid())
  userId       String
  duration     Int
  type         String   @default("custom")
  ambientSound String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
}

model DailyStats {
  id                 String   @id @default(cuid())
  userId             String
  date               DateTime @db.Date
  affirmationsViewed Int      @default(0)
  sessionMinutes     Int      @default(0)
  streakCount        Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@index([userId, date])
}

model JournalEntry {
  id            String   @id @default(cuid())
  userId        String
  title         String
  content       String   @db.Text // Encrypted content
  contentIv     String   // Initialization vector for encryption
  mood          String?  // happy, calm, anxious, sad, energetic, etc.
  tags          String[] // wellness, goals, reflection, gratitude, etc.
  isPrivate     Boolean  @default(true)
  wordCount     Int      @default(0)
  readingTime   Int      @default(0) // in minutes
  lastViewedAt  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reflections   JournalReflection[]
  
  @@index([userId, createdAt])
  @@index([userId, mood])
  @@index([userId, tags])
}

model JournalReflection {
  id            String   @id @default(cuid())
  journalId     String
  userId        String
  content       String   @db.Text
  reflectionType String  // progress, insight, gratitude, lesson
  createdAt     DateTime @default(now())
  
  journal       JournalEntry @relation(fields: [journalId], references: [id], onDelete: Cascade)
  
  @@index([journalId])
  @@index([userId, createdAt])
}
